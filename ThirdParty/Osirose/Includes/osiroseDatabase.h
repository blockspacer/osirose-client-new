// generated by C:/Users/drago/Documents/dev/osirose-new/3rdparty/bin/sqlpp11-ddl2cpp C:/Users/drago/Documents/dev/osirose-new/Database/osirose.sql C:/Users/drago/Documents/dev/osirose-new/build/gen/osiroseDatabase osiroseDatabase
#ifndef OSIROSEDATABASE_OSIROSEDATABASE_H
#define OSIROSEDATABASE_OSIROSEDATABASE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace osiroseDatabase
{
  namespace Accounts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct AccountType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "account_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountType;
            T& operator()() { return accountType; }
            const T& operator()() const { return accountType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Salt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "salt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T salt;
            T& operator()() { return salt; }
            const T& operator()() const { return salt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Access
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "access";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T access;
            T& operator()() { return access; }
            const T& operator()() const { return access; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Platinium
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "platinium";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T platinium;
            T& operator()() { return platinium; }
            const T& operator()() const { return platinium; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct Online
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "online";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T online;
            T& operator()() { return online; }
            const T& operator()() const { return online; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct LoginCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T loginCount;
            T& operator()() { return loginCount; }
            const T& operator()() const { return loginCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Lastip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lastip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastip;
            T& operator()() { return lastip; }
            const T& operator()() const { return lastip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Lasttime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lasttime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lasttime;
            T& operator()() { return lasttime; }
            const T& operator()() const { return lasttime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
  } // namespace Accounts_

  struct Accounts: sqlpp::table_t<Accounts,
               Accounts_::Id,
               Accounts_::AccountType,
               Accounts_::Username,
               Accounts_::Password,
               Accounts_::Salt,
               Accounts_::Access,
               Accounts_::Active,
               Accounts_::Platinium,
               Accounts_::Online,
               Accounts_::LoginCount,
               Accounts_::Lastip,
               Accounts_::Lasttime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts;
        T& operator()() { return accounts; }
        const T& operator()() const { return accounts; }
      };
    };
  };
  namespace Characters_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Userid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userid;
            T& operator()() { return userid; }
            const T& operator()() const { return userid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Job
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T job;
            T& operator()() { return job; }
            const T& operator()() const { return job; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Clanid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "clanid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clanid;
            T& operator()() { return clanid; }
            const T& operator()() const { return clanid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ClanContribution
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "clan_contribution";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clanContribution;
            T& operator()() { return clanContribution; }
            const T& operator()() const { return clanContribution; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ClanRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "clan_rank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clanRank;
            T& operator()() { return clanRank; }
            const T& operator()() const { return clanRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Factionid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "factionid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionid;
            T& operator()() { return factionid; }
            const T& operator()() const { return factionid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_rank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionRank;
            T& operator()() { return factionRank; }
            const T& operator()() const { return factionRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Fame
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fame;
            T& operator()() { return fame; }
            const T& operator()() const { return fame; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionFame1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_fame1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionFame1;
            T& operator()() { return factionFame1; }
            const T& operator()() const { return factionFame1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionFame2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_fame2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionFame2;
            T& operator()() { return factionFame2; }
            const T& operator()() const { return factionFame2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionPoints1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_points1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionPoints1;
            T& operator()() { return factionPoints1; }
            const T& operator()() const { return factionPoints1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionPoints2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_points2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionPoints2;
            T& operator()() { return factionPoints2; }
            const T& operator()() const { return factionPoints2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FactionPoints3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction_points3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionPoints3;
            T& operator()() { return factionPoints3; }
            const T& operator()() const { return factionPoints3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Face
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "face";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T face;
            T& operator()() { return face; }
            const T& operator()() const { return face; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Hair
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hair";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hair;
            T& operator()() { return hair; }
            const T& operator()() const { return hair; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Stone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stone;
            T& operator()() { return stone; }
            const T& operator()() const { return stone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Exp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "exp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exp;
            T& operator()() { return exp; }
            const T& operator()() const { return exp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Zuly
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zuly";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zuly;
            T& operator()() { return zuly; }
            const T& operator()() const { return zuly; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CurrentHp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentHp;
            T& operator()() { return currentHp; }
            const T& operator()() const { return currentHp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CurrentMp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentMp;
            T& operator()() { return currentMp; }
            const T& operator()() const { return currentMp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxHp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxHp;
            T& operator()() { return maxHp; }
            const T& operator()() const { return maxHp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxMp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxMp;
            T& operator()() { return maxMp; }
            const T& operator()() const { return maxMp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Stamina
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stamina";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stamina;
            T& operator()() { return stamina; }
            const T& operator()() const { return stamina; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Str
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "str";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T str;
            T& operator()() { return str; }
            const T& operator()() const { return str; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dex;
            T& operator()() { return dex; }
            const T& operator()() const { return dex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Int_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "int_";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T int_;
            T& operator()() { return int_; }
            const T& operator()() const { return int_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Con
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "con";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T con;
            T& operator()() { return con; }
            const T& operator()() const { return con; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Charm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charm;
            T& operator()() { return charm; }
            const T& operator()() const { return charm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Sense
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sense";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sense;
            T& operator()() { return sense; }
            const T& operator()() const { return sense; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct StatPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stat_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T statPoints;
            T& operator()() { return statPoints; }
            const T& operator()() const { return statPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SkillPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skillPoints;
            T& operator()() { return skillPoints; }
            const T& operator()() const { return skillPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PenaltyExp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "penalty_exp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T penaltyExp;
            T& operator()() { return penaltyExp; }
            const T& operator()() const { return penaltyExp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ReviveMap
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "revive_map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reviveMap;
            T& operator()() { return reviveMap; }
            const T& operator()() const { return reviveMap; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct DeleteDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "delete_date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleteDate;
            T& operator()() { return deleteDate; }
            const T& operator()() const { return deleteDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct PkFlag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk_flag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pkFlag;
            T& operator()() { return pkFlag; }
            const T& operator()() const { return pkFlag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace Characters_

  struct Characters: sqlpp::table_t<Characters,
               Characters_::Id,
               Characters_::Userid,
               Characters_::Name,
               Characters_::Race,
               Characters_::Level,
               Characters_::Job,
               Characters_::Clanid,
               Characters_::ClanContribution,
               Characters_::ClanRank,
               Characters_::Factionid,
               Characters_::FactionRank,
               Characters_::Fame,
               Characters_::FactionFame1,
               Characters_::FactionFame2,
               Characters_::FactionPoints1,
               Characters_::FactionPoints2,
               Characters_::FactionPoints3,
               Characters_::Face,
               Characters_::Hair,
               Characters_::Stone,
               Characters_::Exp,
               Characters_::Zuly,
               Characters_::CurrentHp,
               Characters_::CurrentMp,
               Characters_::MaxHp,
               Characters_::MaxMp,
               Characters_::Stamina,
               Characters_::Str,
               Characters_::Dex,
               Characters_::Int_,
               Characters_::Con,
               Characters_::Charm,
               Characters_::Sense,
               Characters_::StatPoints,
               Characters_::SkillPoints,
               Characters_::PenaltyExp,
               Characters_::ReviveMap,
               Characters_::Map,
               Characters_::X,
               Characters_::Y,
               Characters_::DeleteDate,
               Characters_::PkFlag>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "characters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characters;
        T& operator()() { return characters; }
        const T& operator()() const { return characters; }
      };
    };
  };
  namespace Friends_
  {
    struct CharId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "char_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charId;
            T& operator()() { return charId; }
            const T& operator()() const { return charId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FriendId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "friend_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T friendId;
            T& operator()() { return friendId; }
            const T& operator()() const { return friendId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace Friends_

  struct Friends: sqlpp::table_t<Friends,
               Friends_::CharId,
               Friends_::FriendId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "friends";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T friends;
        T& operator()() { return friends; }
        const T& operator()() const { return friends; }
      };
    };
  };
  namespace Inventory_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct CharId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "char_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charId;
            T& operator()() { return charId; }
            const T& operator()() const { return charId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Itemtype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemtype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemtype;
            T& operator()() { return itemtype; }
            const T& operator()() const { return itemtype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Refine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refine;
            T& operator()() { return refine; }
            const T& operator()() const { return refine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GemOpt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gem_opt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemOpt;
            T& operator()() { return gemOpt; }
            const T& operator()() const { return gemOpt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Socket
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "socket";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T socket;
            T& operator()() { return socket; }
            const T& operator()() const { return socket; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct StorageType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "storage_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T storageType;
            T& operator()() { return storageType; }
            const T& operator()() const { return storageType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  } // namespace Inventory_

  struct Inventory: sqlpp::table_t<Inventory,
               Inventory_::Uid,
               Inventory_::CharId,
               Inventory_::Itemid,
               Inventory_::Itemtype,
               Inventory_::Amount,
               Inventory_::Refine,
               Inventory_::Slot,
               Inventory_::GemOpt,
               Inventory_::Socket,
               Inventory_::Price,
               Inventory_::StorageType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "inventory";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T inventory;
        T& operator()() { return inventory; }
        const T& operator()() const { return inventory; }
      };
    };
  };
  namespace ItemDb_
  {
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Desc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "desc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T desc;
            T& operator()() { return desc; }
            const T& operator()() const { return desc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Subtype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subtype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subtype;
            T& operator()() { return subtype; }
            const T& operator()() const { return subtype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PriceBuy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price_buy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T priceBuy;
            T& operator()() { return priceBuy; }
            const T& operator()() const { return priceBuy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PriceSell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price_sell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T priceSell;
            T& operator()() { return priceSell; }
            const T& operator()() const { return priceSell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Weight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weight;
            T& operator()() { return weight; }
            const T& operator()() const { return weight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Attack
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attack";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attack;
            T& operator()() { return attack; }
            const T& operator()() const { return attack; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Defense
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "defense";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T defense;
            T& operator()() { return defense; }
            const T& operator()() const { return defense; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Range
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T range;
            T& operator()() { return range; }
            const T& operator()() const { return range; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Slots
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slots";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slots;
            T& operator()() { return slots; }
            const T& operator()() const { return slots; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct EquipJobs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "equip_jobs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipJobs;
            T& operator()() { return equipJobs; }
            const T& operator()() const { return equipJobs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct EquipGenders
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "equip_genders";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipGenders;
            T& operator()() { return equipGenders; }
            const T& operator()() const { return equipGenders; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct EquipLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "equip_level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipLevel;
            T& operator()() { return equipLevel; }
            const T& operator()() const { return equipLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Refinable
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refinable";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refinable;
            T& operator()() { return refinable; }
            const T& operator()() const { return refinable; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ViewId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "view_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T viewId;
            T& operator()() { return viewId; }
            const T& operator()() const { return viewId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Script
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "script";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T script;
            T& operator()() { return script; }
            const T& operator()() const { return script; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ItemDb_

  struct ItemDb: sqlpp::table_t<ItemDb,
               ItemDb_::Type,
               ItemDb_::Id,
               ItemDb_::Name,
               ItemDb_::Desc,
               ItemDb_::Subtype,
               ItemDb_::PriceBuy,
               ItemDb_::PriceSell,
               ItemDb_::Weight,
               ItemDb_::Attack,
               ItemDb_::Defense,
               ItemDb_::Range,
               ItemDb_::Slots,
               ItemDb_::EquipJobs,
               ItemDb_::EquipGenders,
               ItemDb_::EquipLevel,
               ItemDb_::Refinable,
               ItemDb_::ViewId,
               ItemDb_::Script>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_db";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemDb;
        T& operator()() { return itemDb; }
        const T& operator()() const { return itemDb; }
      };
    };
  };
  namespace ListClan_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Logo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "logo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T logo;
            T& operator()() { return logo; }
            const T& operator()() const { return logo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Back
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "back";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T back;
            T& operator()() { return back; }
            const T& operator()() const { return back; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Cp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cp;
            T& operator()() { return cp; }
            const T& operator()() const { return cp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Grade
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "grade";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T grade;
            T& operator()() { return grade; }
            const T& operator()() const { return grade; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Slogan
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slogan";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slogan;
            T& operator()() { return slogan; }
            const T& operator()() const { return slogan; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct News
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "news";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T news;
            T& operator()() { return news; }
            const T& operator()() const { return news; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace ListClan_

  struct ListClan: sqlpp::table_t<ListClan,
               ListClan_::Id,
               ListClan_::Logo,
               ListClan_::Back,
               ListClan_::Name,
               ListClan_::Cp,
               ListClan_::Grade,
               ListClan_::Slogan,
               ListClan_::News>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "list_clan";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T listClan;
        T& operator()() { return listClan; }
        const T& operator()() const { return listClan; }
      };
    };
  };
  namespace Party_
  {
    struct PartyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "party_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T partyId;
            T& operator()() { return partyId; }
            const T& operator()() const { return partyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LeaderId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leader_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaderId;
            T& operator()() { return leaderId; }
            const T& operator()() const { return leaderId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct LeaderChar
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leader_char";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaderChar;
            T& operator()() { return leaderChar; }
            const T& operator()() const { return leaderChar; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace Party_

  struct Party: sqlpp::table_t<Party,
               Party_::PartyId,
               Party_::Name,
               Party_::LeaderId,
               Party_::LeaderChar>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "party";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T party;
        T& operator()() { return party; }
        const T& operator()() const { return party; }
      };
    };
  };
  namespace Sessions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Userid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userid;
            T& operator()() { return userid; }
            const T& operator()() const { return userid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Channelid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "channelid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T channelid;
            T& operator()() { return channelid; }
            const T& operator()() const { return channelid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Worldip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "worldip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T worldip;
            T& operator()() { return worldip; }
            const T& operator()() const { return worldip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Worldport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "worldport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T worldport;
            T& operator()() { return worldport; }
            const T& operator()() const { return worldport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Sessions_

  struct Sessions: sqlpp::table_t<Sessions,
               Sessions_::Id,
               Sessions_::Userid,
               Sessions_::Channelid,
               Sessions_::Time,
               Sessions_::Charid,
               Sessions_::Worldip,
               Sessions_::Worldport>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sessions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sessions;
        T& operator()() { return sessions; }
        const T& operator()() const { return sessions; }
      };
    };
  };
  namespace Skill_
  {
    struct CharId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "char_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charId;
            T& operator()() { return charId; }
            const T& operator()() const { return charId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace Skill_

  struct Skill: sqlpp::table_t<Skill,
               Skill_::CharId,
               Skill_::Id,
               Skill_::Level>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skill;
        T& operator()() { return skill; }
        const T& operator()() const { return skill; }
      };
    };
  };
  namespace SkillDb_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Desc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "desc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T desc;
            T& operator()() { return desc; }
            const T& operator()() const { return desc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Range
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T range;
            T& operator()() { return range; }
            const T& operator()() const { return range; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Class_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "class_";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Power
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power;
            T& operator()() { return power; }
            const T& operator()() const { return power; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Script
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "script";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T script;
            T& operator()() { return script; }
            const T& operator()() const { return script; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace SkillDb_

  struct SkillDb: sqlpp::table_t<SkillDb,
               SkillDb_::Id,
               SkillDb_::Name,
               SkillDb_::Desc,
               SkillDb_::Level,
               SkillDb_::Type,
               SkillDb_::Range,
               SkillDb_::Class_,
               SkillDb_::Power,
               SkillDb_::Script>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_db";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillDb;
        T& operator()() { return skillDb; }
        const T& operator()() const { return skillDb; }
      };
    };
  };
  namespace Storage_
  {
    struct Owner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "owner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T owner;
            T& operator()() { return owner; }
            const T& operator()() const { return owner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Itemnum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemnum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemnum;
            T& operator()() { return itemnum; }
            const T& operator()() const { return itemnum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Itemtype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemtype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemtype;
            T& operator()() { return itemtype; }
            const T& operator()() const { return itemtype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Refine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refine;
            T& operator()() { return refine; }
            const T& operator()() const { return refine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Durability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "durability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T durability;
            T& operator()() { return durability; }
            const T& operator()() const { return durability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Lifespan
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lifespan";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lifespan;
            T& operator()() { return lifespan; }
            const T& operator()() const { return lifespan; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Slotnum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slotnum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slotnum;
            T& operator()() { return slotnum; }
            const T& operator()() const { return slotnum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Count
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T count;
            T& operator()() { return count; }
            const T& operator()() const { return count; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Stats
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stats";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stats;
            T& operator()() { return stats; }
            const T& operator()() const { return stats; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Socketed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "socketed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T socketed;
            T& operator()() { return socketed; }
            const T& operator()() const { return socketed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appraised
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appraised";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appraised;
            T& operator()() { return appraised; }
            const T& operator()() const { return appraised; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Gem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gem;
            T& operator()() { return gem; }
            const T& operator()() const { return gem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace Storage_

  struct Storage: sqlpp::table_t<Storage,
               Storage_::Owner,
               Storage_::Itemnum,
               Storage_::Itemtype,
               Storage_::Refine,
               Storage_::Durability,
               Storage_::Lifespan,
               Storage_::Slotnum,
               Storage_::Count,
               Storage_::Stats,
               Storage_::Socketed,
               Storage_::Appraised,
               Storage_::Gem>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "storage";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T storage;
        T& operator()() { return storage; }
        const T& operator()() const { return storage; }
      };
    };
  };
  namespace Wishlist_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct CharId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "char_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charId;
            T& operator()() { return charId; }
            const T& operator()() const { return charId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Itemtype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemtype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemtype;
            T& operator()() { return itemtype; }
            const T& operator()() const { return itemtype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Refine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refine;
            T& operator()() { return refine; }
            const T& operator()() const { return refine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GemOpt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gem_opt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemOpt;
            T& operator()() { return gemOpt; }
            const T& operator()() const { return gemOpt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Socket
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "socket";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T socket;
            T& operator()() { return socket; }
            const T& operator()() const { return socket; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace Wishlist_

  struct Wishlist: sqlpp::table_t<Wishlist,
               Wishlist_::Uid,
               Wishlist_::CharId,
               Wishlist_::Itemid,
               Wishlist_::Itemtype,
               Wishlist_::Amount,
               Wishlist_::Refine,
               Wishlist_::Slot,
               Wishlist_::GemOpt,
               Wishlist_::Socket,
               Wishlist_::Price>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "wishlist";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T wishlist;
        T& operator()() { return wishlist; }
        const T& operator()() const { return wishlist; }
      };
    };
  };
} // namespace osiroseDatabase
#endif
