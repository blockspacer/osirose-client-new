// generated by C:/Users/drago/Documents/dev/osirose-new/3rdparty/bin/sqlpp11-ddl2cpp C:/Users/drago/Documents/dev/osirose-new/Database/logs.sql C:/Users/drago/Documents/dev/osirose-new/build/gen/logDatabase logDatabase
#ifndef LOGDATABASE_LOGDATABASE_H
#define LOGDATABASE_LOGDATABASE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace logDatabase
{
  namespace ChatLog_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct TypeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T typeId;
            T& operator()() { return typeId; }
            const T& operator()() const { return typeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SrcCharid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcCharid;
            T& operator()() { return srcCharid; }
            const T& operator()() const { return srcCharid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SrcAccountid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_accountid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcAccountid;
            T& operator()() { return srcAccountid; }
            const T& operator()() const { return srcAccountid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SrcMap
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcMap;
            T& operator()() { return srcMap; }
            const T& operator()() const { return srcMap; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SrcMapX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_map_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcMapX;
            T& operator()() { return srcMapX; }
            const T& operator()() const { return srcMapX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SrcMapY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_map_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcMapY;
            T& operator()() { return srcMapY; }
            const T& operator()() const { return srcMapY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DstCharname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dst_charname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dstCharname;
            T& operator()() { return dstCharname; }
            const T& operator()() const { return dstCharname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T message;
            T& operator()() { return message; }
            const T& operator()() const { return message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  } // namespace ChatLog_

  struct ChatLog: sqlpp::table_t<ChatLog,
               ChatLog_::Id,
               ChatLog_::Time,
               ChatLog_::Type,
               ChatLog_::TypeId,
               ChatLog_::SrcCharid,
               ChatLog_::SrcAccountid,
               ChatLog_::SrcMap,
               ChatLog_::SrcMapX,
               ChatLog_::SrcMapY,
               ChatLog_::DstCharname,
               ChatLog_::Message>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "chat_log";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T chatLog;
        T& operator()() { return chatLog; }
        const T& operator()() const { return chatLog; }
      };
    };
  };
  namespace LoginLog_
  {
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Ip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ip;
            T& operator()() { return ip; }
            const T& operator()() const { return ip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Rcode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rcode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rcode;
            T& operator()() { return rcode; }
            const T& operator()() const { return rcode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Log
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "log";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T log;
            T& operator()() { return log; }
            const T& operator()() const { return log; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  } // namespace LoginLog_

  struct LoginLog: sqlpp::table_t<LoginLog,
               LoginLog_::Time,
               LoginLog_::Ip,
               LoginLog_::User,
               LoginLog_::Rcode,
               LoginLog_::Log>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "login_log";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T loginLog;
        T& operator()() { return loginLog; }
        const T& operator()() const { return loginLog; }
      };
    };
  };
} // namespace logDatabase
#endif
