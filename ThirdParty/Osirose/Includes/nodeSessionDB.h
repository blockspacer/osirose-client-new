// generated by C:/Users/drago/Documents/dev/osirose-new/3rdparty/bin/sqlpp11-ddl2cpp C:/Users/drago/Documents/dev/osirose-new/Database/nodeSessions.sql C:/Users/drago/Documents/dev/osirose-new/build/gen/nodeSessionDB nodeSessionDB
#ifndef NODESESSIONDB_NODESESSIONDB_H
#define NODESESSIONDB_NODESESSIONDB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace nodeSessionDB
{
  namespace Sessions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Charip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charip;
            T& operator()() { return charip; }
            const T& operator()() const { return charip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Charport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charport;
            T& operator()() { return charport; }
            const T& operator()() const { return charport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Worldip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "worldip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T worldip;
            T& operator()() { return worldip; }
            const T& operator()() const { return worldip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Worldport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "worldport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T worldport;
            T& operator()() { return worldport; }
            const T& operator()() const { return worldport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Sessions_

  struct Sessions: sqlpp::table_t<Sessions,
               Sessions_::Id,
               Sessions_::Name,
               Sessions_::State,
               Sessions_::Charip,
               Sessions_::Charport,
               Sessions_::Worldip,
               Sessions_::Worldport>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sessions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sessions;
        T& operator()() { return sessions; }
        const T& operator()() const { return sessions; }
      };
    };
  };
} // namespace nodeSessionDB
#endif
